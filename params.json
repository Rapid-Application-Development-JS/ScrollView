{"name":"ScrollView","tagline":"Scroll wrapper with additional features.","body":"ScrollView\r\n===========\r\n\r\nScroll wrapper with additional features.\r\n\r\n## Advantages:\r\n\r\n* Lightweight;\r\n* Cross browser compatible;\r\n* Tested on different devices and platforms;\r\n* High performance, on the par and faster than other libraries;\r\n* Can be used as library with declarative options and as WebComponent;\r\n* Has fast and stable scroll events using JavaScript callbacks for everything;\r\n* Has callback on lot of events like pointer down, scroll, fling, scroll beyond the borders etc.;\r\n* Highly customizable. Scrollbar customizable too.\r\n\r\n## Install\r\n\r\nInstall using Bower.\r\n\r\n```bash\r\nbower install --save radjs-scrollview\r\n```\r\n\r\nOr using npm.\r\n\r\n```bash\r\nnpm install --save radjs-scrollview\r\n```\r\n\r\nIf you target browser without `Custom Element` support you should include WebComponents polyfill.\r\n\r\n```bash\r\nbower install --save webcomponentsjs\r\n```\r\n\r\n## Include\r\n\r\nIt is recommended to use libraries like `RequireJS` or `SystemJS` for module loading to prevent global namespace pollution.\r\n\r\n```javascript\r\nrequire.config({\r\n\t\"paths\": {\r\n\t\t \"radjs-scrollview\": \"vendors/radjs-scrollview/release/radjs-scrollview.min\",\r\n\t\t\t// If you want use scroll view as WebComponent include also these files\r\n\t\t \"x-radjs-scrollview\": \"vendors/radjs-scrollview/release/x-radjs-scrollview.min\",\r\n\t\t // Polyfill is no longer needed Chrome 36+, Opera 29+, Android Browser 4.4.4+, Chrome for Android 42+\r\n\t\t \"webcomponents\": \"vendors/webcomponentsjs/webcomponents-lite.min\"\r\n\t}\r\n});\r\nrequire([\"radjs-scrollview\"]), function () {});\r\n```\r\n\r\n## Use as WebComponent\r\n\r\nAfter including `x-radjs-scrollview` file only thing you need to do is add attribute `is` to your HTML code.\r\nOptions for webcomponent are taken from `options` attribute.\r\n**Note:** You can freely add `is` attribute after document loading.\r\n\r\n```html\r\n<div is=\"x-radjs-scrollview\" options=\"direction: horizontal; bounds: false; scrollbar: scrollbar-horizontal;\">\r\n\t<div class=\"scroll-content\">\r\n\t\t <ul>\r\n\t\t\t\t<li>Very long list</li>\r\n\t\t </ul>\r\n\t</div>\r\n</div>\r\n```\r\n\r\n## Usage as library\r\n\r\nVery simple usage, just to scrollable content.\r\n\r\n```javascript\r\nnew ScrollView(document.getElementById(\"scroll\"), {direction: \"vertical\"});\r\n```\r\n\r\nFull usage:\r\n\r\n```javascript\r\nvar $scrollContent = document.getElementById(\"content-scroll-vertical\"); // Content to be scrolled\r\nvar $scrollView = $scrollContent.parentNode; // Container for the content\r\nvar options = {\r\n\tbounds: true,\r\n\tdirection: \"vertical\",\r\n\tscrollbar: \"scrollbar-vertical\" // CSS class\r\n};\r\n$scrollView.scroll_bar = new ScrollView.ScrollBar($scrollView, {\r\n\tclassName: options.scrollbar,\r\n\tdirection: options.direction\r\n}); // `scroll_bar` it's just a custom name\r\n// Create and attach view. `scroller` it's just a custom name, but in WebComponent it's predefined.\r\n$scrollView.scroller = new ScrollView($scrollView, options);\r\n// Create and attach custom pointer events, because of: IE support, SVG elements, and links bugs\r\n// `tracker` is also custom name but it's also predefined in WebComponent\r\n$scrollView.tracker = new ScrollView.PointerWrapper($scrollView, $scrollView.scroller);\r\n```\r\n\r\nSee for more advanced usage in examples folder.\r\n\r\n## API\r\n\r\n### `ScrollView` creating options.\r\n\r\n##### preventMove\r\n\r\nBoolean, default is *true*. Prevent default on move event, also never works on input, textarea, button, select.\r\n\r\n###### resizeEvent\r\n\r\nBoolean, default is *true*. Track `Window` resize event.\r\n\r\n###### scroll\r\n\r\nBoolean, default is *true*. Scroll HTML element with content inside wrapper, not only tracking such event.\r\n\r\n###### bounds\r\n\r\nBoolean, default is *false*. Scroll event called beyound boundaries.\r\n\r\n###### direction\r\n\r\nString, default is \"vertical\". Scroll direction.\r\n\r\n###### marginMIN\r\n\r\nNumber, default is zero. Minimal margin of HTML element, after refresh in example.\r\n\r\n###### marginMAX\r\n\r\nNumber, default is zero. Maximum margin of scrollable content inside wrapper.\r\n\r\n### Event functions\r\n\r\n###### onScrollBefore (shift: number)\r\n\r\nFunction, default is function that returns true. Function that called before scroll event happening. To start scrolling function should return `true`.\r\n\r\n###### onScroll (shift: number, position: number)\r\n\r\nFunction, default is function that returns true. Function called when scroll happening.\r\n\r\n###### onScrollAfter ()\r\n\r\nFunction, default is empty function. Function called after scroll ends, no arguments.\r\n\r\n###### onScrollTypeChange (scrollType: string)\r\n\r\nFunction, default is empty function. Function called when scroll type changes.\r\n\r\n### Additional event functions\r\n\r\n`onDownBefore` and `onDownAfter` - callbacks called before and after pointer down event.\r\n\r\n`onMoveBefore` and `onMoveAfter` - callbacks called before and after pointer move event.\r\n\r\n`onCancelBefore` and `onCancelAfter` - callbacks called before and after pointer cancel event.\r\n\r\n`onUpBefore` and `onUpAfter` - callbacks called before and after pointer up event.\r\n\r\n`onFlingBefore` and `onFlingAfter` - callbacks called before and after fling.\r\n\r\n`onResizeBefore` and `onResizeAfter` - callbacks called before and after window resize.\r\n\r\nExample usage:\r\n\r\n```javascript\r\noptions.onFlingBefore = function (event) {\r\n\t// prevent default action if needed\r\n\t// returning strictly boolean `false` will prevent handling this event\r\n\treturn false;\r\n};\r\n```\r\n\r\n### Public parameters and methods\r\n\r\n**constructor**\r\n\r\n```javascript\r\nvar preserve = new ScrollView(document.getElementById(\"scroll\"), {direction: \"vertical\"});\r\n```\r\n\r\n**preventDefaultTags**\r\n\r\nRegular expression with tags that will not respond on pointer events.\r\n\r\n```javascript\r\noptions.preventDefaultTags = /^(INPUT|TEXTAREA|BUTTON|SELECT)$/;\r\n```\r\n\r\n**easeFunc**\r\n\r\nFunction to calculate easing time between animations.\r\n\r\n```javascript\r\n$scrollView.easeFunc = function (microtime) {\r\n\treturn microtime * (2 - microtime);\r\n};\r\n```\r\n\r\n**destroy**\r\n\r\nDetach `ScrollView` from HTML element.\r\n\r\n```javascript\r\nvar $scroll = document.getElementById(\"scroll\");\r\n$scroll.scroller = new ScrollView($scroll, {direction: \"vertical\"});\r\n// ...\r\n$scroll.scroller.destroy();\r\n```\r\n\r\n**refresh**\r\n\r\nRefresh scrollable content inside ScrollView.\r\n\r\n```javascript\r\nvar $scroll = document.getElementById(\"scroll\");\r\n$scroll.scroller = new ScrollView($scroll, {direction: \"vertical\"});\r\n// ...\r\n$scroll.scroller.refresh();\r\n```\r\n\r\n**scroll**\r\n\r\nSmooth content scroll to specified position for a specified time. You have to pass negative numbers.\r\n\r\n```javascript\r\nvar $scroll = document.getElementById(\"scroll\");\r\n$scroll.scroller = new ScrollView($scroll, {direction: \"vertical\"});\r\n$scroll.scroll(-640, 1000);\r\n```\r\n\r\n**jumpTo**\r\n\r\nThis method will *jump* content to position.\r\n\r\n```javascript\r\nvar $scroll = document.getElementById(\"scroll\");\r\n$scroll.scroller = new ScrollView($scroll, {direction: \"vertical\"});\r\n$scroll.jumpTo(640);\r\n```\r\n\r\n**handleEvent**\r\n\r\nHandle event by `ScrollView`.\r\n\r\n```javascript\r\nvar $scrollView = document.getElementById(\"scroll\");\r\n$scrollView.scroller = new ScrollView($scroll, {\r\n\tdirection: \"vertical\",\r\n\tonDownBefore: function (event) {\r\n\t\t if (something_happend) {\r\n\t\t\t\t// You can catch those event params, modify them and pass to handler method\r\n\t\t\t\t$scrollView.scroller.handleEvent(event, true);\r\n\t\t\t\treturn;\r\n\t\t }\r\n\t\t return false; // prevent default action\r\n\t}\r\n});\r\n```\r\n\r\n### Internal plugins\r\n\r\n### ScrollBar\r\n\r\nCreate custom scroll bar.\r\n\r\n```javascript\r\nvar $scrollView = document.getElementById(\"scroll-wrapper\");\r\nvar options = {};\r\n$scrollView.scroll_bar = new ScrollView.ScrollBar($scrollView, {\r\n\tclassName: \"bem--scroll_bar\",\r\n\tdirection: \"vertical\"\r\n});\r\noptions.onScroll = function (shift, position) {\r\n\tif ($scrollView.scroll_bar) { // If scrollbar defined\r\n\t\t $scrollView.scroll_bar.setPosition(position);\r\n\t}\r\n\tif (typeof $scrollView.onScroll === \"function\") {\r\n\t\t $scrollView.onScroll(arguments);\r\n\t}\r\n};\r\n$scrollView.scroller = new ScrollView($scrollView, options);\r\n```\r\n\r\n### PointerWrapper\r\n\r\nProvide point events for DOM elements.\r\n\r\n```javascript\r\nvar $scrollView = document.getElementById(\"scroll-wrapper\");\r\n$scrollView.scroller = new ScrollView($scrollView, {});\r\n$scrollView.tracker = new ScrollView.PointerWrapper($scrollView, $scrollView.scroller);\r\n$scrollView.destroy = function () {\r\n\t$scrollView.scroller.destroy();\r\n\t$scrollView.tracker.destroy();\r\n};\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}