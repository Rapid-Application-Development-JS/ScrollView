{"version":3,"sources":["x-scrollviewjs.min.js"],"names":["mix","old","newMixin","attr","hasOwnProperty","parseValue","value","length","undefined","trim","toLowerCase","isNaN","indexOf","parseFloat","parseInt","parseOptions","string","attrs","index","current","key","result","split","proto","Object","create","HTMLDivElement","prototype","createdCallback","refreshMthd","element","this","options","getAttribute","isInited","parentNode","scrollbar","scrollBar","ScrollViewJS","ScrollBar","className","direction","onScrollBefore","arguments","onScrollAfter","onScroll","setPosition","scroller","tracker","PointerWrapper","refresh","apply","_min","scroll","shift","duration","destroy","attachedCallback","detachedCallback","attributeChangedCallback","attrName","oldVal","newVal","document","registerElement","extends"],"mappings":"CAAC,WASC,QAASA,GAAIC,EAAKC,GAChB,GAAIC,EACJ,KAAKA,IAAQD,GACPA,EAASE,eAAeD,KAC1BF,EAAIE,GAAQD,EAASC,GAGzB,OAAOF,GAQT,QAASI,GAAWC,GAClB,IAAKA,EAAMC,OACT,MAAOC,OAETF,GAAQA,EAAMG,MACd,OAA4B,SAAxBH,EAAMI,eACD,EAEmB,UAAxBJ,EAAMI,eACD,EAEmB,SAAxBJ,EAAMI,cACD,KAEmB,cAAxBJ,EAAMI,cACDF,OAELG,MAAML,GACDA,EAEkB,IAAvBA,EAAMM,QAAQ,KACTC,WAAWP,GAEbQ,SAASR,EAAO,IAQzB,QAASS,GAAaC,GACpB,GAAiBC,GAAOC,EAAOX,EAAQY,EAASC,EAA5CC,IACJ,KAAKL,IAAWA,EAAOT,OACrB,MAAOc,EAETJ,GAAQD,EAAOM,MAAM,IACrB,KAAKJ,EAAQ,EAAGX,EAASU,EAAMV,OAAgBA,EAARW,EAAgBA,GAAS,EAAG,CACjEC,EAAUF,EAAMC,GAAOI,MAAM,IAC7BF,GAAMD,EAAQ,GAAGV,MACbW,GAAIb,SACNc,EAAOD,GAAOf,EAAWc,EAAQ,KAGrC,MAAOE,GAnET,GAAIE,EAsEJA,GAAQC,OAAOC,OAAOC,eAAeC,UACrCJ,GAAMK,gBAAkB,WACtB,GAAoBC,GAAhBC,EAAUC,KACZC,EAAUjB,EAAagB,KAAKE,aAAa,WAC3C,KAAIF,KAAKG,UAAaH,KAAKI,WAA3B,CAGAJ,KAAKG,UAAW,CACZF,GAAQI,YACVL,KAAKM,UAAY,GAAIC,cAAaC,UAAUR,MAC1CS,UAAWR,EAAQI,UACnBK,UAAWT,EAAQS,WAAa,aAGpCT,GAAUhC,GAER0C,eAAgB,WACd,GAAIrB,IAAS,CACyB,mBAA3BS,GAAQY,iBACjBrB,EAASS,EAAQY,eAAeC,WAElC,OAAOtB,IAETuB,cAAe,WACwB,kBAA1Bd,GAAQc,eACjBd,EAAQc,cAAcD,YAG1BE,SAAU,WACJf,EAAQO,WACVP,EAAQO,UAAUS,YAAYH,UAAU,GAEV,mBAArBb,GAAQe,UACjBf,EAAQe,SAASF,aAGpBX,EACHD,MAAKgB,SAAW,GAAIT,cAAaP,KAAMC,EACvCD,MAAKiB,QAAU,GAAIV,cAAaW,eAAelB,KAAMA,KAAKgB,SAC1DlB,GAAcE,KAAKgB,SAASG,OAC5BnB,MAAKgB,SAASG,QAAU,WACtBrB,EAAYsB,MAAMrB,EAAQiB,SAAUJ,UAChCb,IAAWA,EAAQO,WACrBP,EAAQO,UAAUa,SAASpB,EAAQiB,SAASK,MAIhDrB,MAAKmB,QAAU,WACbnB,KAAKgB,SAASG,UAEhBnB,MAAKsB,OAAS,SAAUC,EAAOC,GAC7BxB,KAAKgB,SAASM,OAAOC,EAAOC,GAE9BxB,MAAKyB,QAAU,WACbzB,KAAKgB,SAASS,SACdzB,MAAKiB,QAAQQ,YAGjBjC,GAAMkC,iBAAmB,WACvB1B,KAAKmB,UAEP3B,GAAMmC,iBAAmB,YAEzBnC,GAAMoC,yBAA2B,SAAUC,EAAUC,EAAQC,IAE7D,OAAOC,UAASC,gBAAgB,kBAC9BC,UAAS,MACTtC,UAAWJ","file":"x-scrollviewjs.min.js","sourcesContent":["(function () {\n  var proto;\n\n  /**\n   * Extend first on object with second\n   * @param {Object} old\n   * @param {Object} newMixin\n   * @return {Object}\n   */\n  function mix(old, newMixin) {\n    var attr;\n    for (attr in newMixin) {\n      if (newMixin.hasOwnProperty(attr)) {\n        old[attr] = newMixin[attr];\n      }\n    }\n    return old;\n  }\n\n  /**\n   * Parse value from string\n   * @param {string} value\n   * @return {*}\n   */\n  function parseValue(value) {\n    if (!value.length) {\n      return undefined;\n    }\n    value = value.trim();\n    if (value.toLowerCase() === 'true') {\n      return true;\n    }\n    if (value.toLowerCase() === 'false') {\n      return false;\n    }\n    if (value.toLowerCase() === 'null') {\n      return null;\n    }\n    if (value.toLowerCase() === 'undefined') {\n      return undefined;\n    }\n    if (isNaN(value)) {\n      return value;\n    }\n    if (value.indexOf('.') !== 1) {\n      return parseFloat(value);\n    }\n    return parseInt(value, 10);\n  }\n\n  /**\n   * Parse string with options\n   * @param {string} string\n   * @return {Object}\n   */\n  function parseOptions(string) {\n    var result = {}, attrs, index, length, current, key;\n    if (!string || !string.length) {\n      return result;\n    }\n    attrs = string.split(';');\n    for (index = 0, length = attrs.length; index < length; index += 1) {\n      current = attrs[index].split(':');\n      key = current[0].trim();\n      if (key.length) {\n        result[key] = parseValue(current[1]);\n      }\n    }\n    return result;\n  }\n\n  proto = Object.create(HTMLDivElement.prototype);\n  proto.createdCallback = function () {\n    var element = this, refreshMthd,\n      options = parseOptions(this.getAttribute('options'));\n    if (this.isInited || !this.parentNode) {\n      return;\n    }\n    this.isInited = true;\n    if (options.scrollbar) {\n      this.scrollBar = new ScrollViewJS.ScrollBar(this, {\n        className: options.scrollbar,\n        direction: options.direction || 'vertical'\n      });\n    }\n    options = mix({\n      // Decorate onScroll methods\n      onScrollBefore: function () {\n        var result = true;\n        if (typeof element.onScrollBefore === 'function') {\n          result = element.onScrollBefore(arguments);\n        }\n        return result;\n      },\n      onScrollAfter: function () {\n        if (typeof element.onScrollAfter === 'function') {\n          element.onScrollAfter(arguments);\n        }\n      },\n      onScroll: function () {\n        if (element.scrollBar) {\n          element.scrollBar.setPosition(arguments[1]);\n        }\n        if (typeof element.onScroll === 'function') {\n          element.onScroll(arguments);\n        }\n      }\n    }, options);\n    this.scroller = new ScrollViewJS(this, options);\n    this.tracker = new ScrollViewJS.PointerWrapper(this, this.scroller);\n    refreshMthd = this.scroller.refresh;\n    this.scroller.refresh = function () {\n      refreshMthd.apply(element.scroller, arguments);\n      if (element && element.scrollBar) {\n        element.scrollBar.refresh(-element.scroller._min);\n      }\n    };\n    // Decorate scroll methods\n    this.refresh = function () {\n      this.scroller.refresh();\n    };\n    this.scroll = function (shift, duration) {\n      this.scroller.scroll(shift, duration);\n    };\n    this.destroy = function () {\n      this.scroller.destroy();\n      this.tracker.destroy();\n    };\n  };\n  proto.attachedCallback = function () {\n    this.refresh();\n  };\n  proto.detachedCallback = function () {\n  };\n  proto.attributeChangedCallback = function (attrName, oldVal, newVal) {\n  };\n  return document.registerElement('x-scrollviewjs', {\n    extends: 'div',\n    prototype: proto\n  });\n}());\n"],"sourceRoot":"/source/"}